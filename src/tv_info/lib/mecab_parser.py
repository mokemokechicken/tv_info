import MeCab




class MecabParser:
    def __init__(self, dict_path):
        self.tagger = MeCab.Tagger(f"-d {dict_path}")

    def parse(self, text):
        words = []
        result = self.tagger.parse(text)
        for line in result.strip().split("\n"):
            # ['▽\t記号,一般,*,*,*,*,▽,▽,▽',
            # '北海道厚真町\t名詞,固有名詞,地域,一般,*,*,北海道厚真町,ホッカイドウアツマチョウ,ホッカイドーアツマチョー',
            # 'で\t助詞,格助詞,一般,*,*,*,で,デ,デ', '震度7\t名詞,固有名詞,一般,*,*,*,震度7,シンドセブン,シンドセブン',
            # '\u3000\t記号,空白,*,*,*,*,\u3000,\u3000,\u3000', '安否\t名詞,一般,*,*,*,*,安否,アンピ,アンピ',
            # '不明\t名詞,形容動詞語幹,*,*,*,*,不明,フメイ,フメイ', '者\t名詞,接尾,一般,*,*,*,者,シャ,シャ',
            # 'の\t助詞,連体化,*,*,*,*,の,ノ,ノ',
            # '救出活動\t名詞,固有名詞,一般,*,*,*,救出活動,キュウシュツカツドウ,キューシュツカツドー',
            # '\u3000\t記号,空白,*,*,*,*,\u3000,\u3000,\u3000',
            # '大規模\t名詞,一般,*,*,*,*,大規模,ダイキボ,ダイキボ', '停電\t名詞,サ変接続,*,*,*,*,停電,テイデン,テイデン',
            # 'の\t助詞,連体化,*,*,*,*,の,ノ,ノ',
            # '復旧作業\t名詞,固有名詞,一般,*,*,*,復旧作業,フッキュウサギョウ,フッキューサギョー',
            # '\u3000\t記号,空白,*,*,*,*,\u3000,\u3000,\u3000', '交通\t名詞,一般,*,*,*,*,交通,コウツウ,コーツー',
            # '影響\t名詞,サ変接続,*,*,*,*,影響,エイキョウ,エイキョー', 'は\t助詞,係助詞,*,*,*,*,は,ハ,ワ',
            # '・\t記号,一般,*,*,*,*,・,・,・',
            # '最新情報\t名詞,固有名詞,一般,*,*,*,最新情報,サイシンジョウホウ,サイシンジョウホー',
            # '▽\t記号,一般,*,*,*,*,▽,▽,▽', '自民党\t名詞,固有名詞,組織,*,*,*,自民党,ジミントウ,ジミントー',
            # '総裁選\t名詞,固有名詞,一般,*,*,*,総裁選,ソウサイセン,ソーサイセン',
            # '告示\t名詞,サ変接続,*,*,*,*,告示,コクジ,コクジ',
            # '【\t記号,括弧開,*,*,*,*,【,【,【', 'キャスター\t名詞,一般,*,*,*,*,キャスター,キャスター,キャスター', '
            # 】\t記号,括弧閉,*,*,*,*,】,】,】',
            # '桑子真帆\t名詞,固有名詞,一般,*,*,*,桑子真帆,クワコマホ,クワコマホ',
            # 'ほか\t名詞,副詞可能,*,*,*,*,ほか,ホカ,ホカ', 'EOS']
            rs = line.split("\t")
            if len(rs) == 1:
                continue
            word = rs[0]
            info = rs[1].split(",")  # 品詞1, 品詞2, ... ?
            words.append((word, info))
        return words
